# # Assignment-03-01
# ## Curzon Numbers
# J.J.Tattersall defined the [Curzon numbers](https://www.numbersaplenty.com/set/Curzon_number/more.php) to be those  $n$  for which  $2n+1$  divides  $2^n+1$.
# The definition can be generalized, with respect to an arbitrary base  $k$, as those numbers for which  $k\cdot n+1$  divides  $k^n+1$.
# * Example 01:
# 5 is a Curzon number
# * Explanation: 
# 2 ^ 5 + 1 = 33 and 2 * 5 + 1 = 11 
# Since 11 divides 33,  so 5 is a curzon number.
# * Example 02:
# 10 is not a Curzon number
# * Explanation: 
# 2 ^ 10 + 1 = 1025 and 2 * 10 + 1 = 21 
# 1025 is not divisible by 21, so 10 is not a curzon number.

# #Problem Statement
# Given a non-negative integer *num*, implement a function that returns True if *num* is a Curzon number, or False otherwise
# * Example:
# is_curzon(5) ➞ True
# > 2 ** 5 + 1 = 33
# > 2 * 5 + 1 = 11
# > 33 is a multiple of 11
# is_curzon(10) ➞ False
# > 2 ** 10 + 1 = 1025
# > 2 * 10 + 1 = 21
# > 1025 is not a multiple of 21
# is_curzon(14) ➞ True
# > 2 ** 14 + 1 = 16385
# > 2 * 14 + 1 = 29
# > 16385 is a multiple of 29
def is_curzon(num: int) -> bool:
    #Write your code Here
    top = 2 ** num + 1
    bot = 2 * num + 1
    return top % bot == 0

print(is_curzon(5))
print(is_curzon(14))
print(is_curzon(10))


# Assignment-03-02
# Circular Prime
# A circular prime is a prime number with the property that the number generated at each intermediate step when cyclically permuting its (base 10) digits will be prime

# Example 01:
# 19937 is a circular prime
# *Explanation:
# 19937
# 99371
# 93719
# 37199
# 71993
# 19937

# The numbers generated by cyclically permuting the digits of 19937. The first digit is removed and readded at the right side of the remaining string of digits. This process is repeated until the starting number is reached again. Since all intermediate numbers generated by this process are prime, 19937 is a circular prime.
# Problem Statement
# Given an integer num, implement a function that returns True if num is a Circular Prime, or False otherwise
# Example:
# is_circularprime(113) ➞ True
# 113 is a circular prime, since all cyclic permutations of 113 (311 and 131) are prime
# is_circularprime(1193) ➞ True
# 1193 is a circular prime, since all cyclic permutations of 1193 (1931, 9311 and 3119) all are also prime

# Check if a number is a prime number
def is_prime(num):
    # Write your code here
    for x in range(2, num//2+1):
        if num % x == 0:
            return False
    return True


def rotate_number(n):
    #Write your code Here
    return int(str(n)[1:] + str(n)[0])
 

def is_circularprime(num: int) -> bool:
    #Write your code Here
    num_digits = len(str(num))
    for x in range(num_digits):
        if not is_prime(num):
            return False
        num = rotate_number(num)
    return True


print("Circular Prime")
print(is_circularprime(113))
print(is_circularprime(1193))
print(is_circularprime(35))
print(is_circularprime(2468))
print(is_circularprime(8864))


# In the figure, the following inequalities hold.
# a + b > c
# a + c > b
# b + c > a
# Example 01:
# Check whether it is possible to have a triangle with the given side lengths.
# 7,9,13
# Explanation:
# Add any two sides and see if it is greater than the other side.
# The sum of 7 and 9 is 16 and 16 is greater than 13 .
# The sum of 9 and 13 is 21 and 21 is greater than 7 .
# The sum of 7 and 13 is 20 and 20 is greater than 9 .
# This set of side lengths satisfies the Triangle Inequality Theorem.
# These lengths do form a triangle.
# Example 02:
# Check whether the given side lengths form a triangle.
# 4,8,15
# Explanation:
# Add any two sides and see if it is greater than the other side.
# The sum of 4 and 8 is 12 and 12 is less than 15 .
# This set of side lengths does not satisfy Triangle Inequality Theorem.
# These lengths do not form a triangle
# Problem Statement
# Given three integers side1, side2 and side3, implement a function that returns True - if given three sides forms a valid triangle, False otherwise.
# Example:
# is_valid_triangle(7, 9, 13) ➞ True
# is_valid_triangle(5, 7, 10) ➞ True
# is_valid_triangle(4, 8, 15) ➞ False
# is_valid_triangle(2, 4, 15) ➞ False

def is_valid_triangle(side1: int, side2:int, side3:int) -> bool:
    #Write your code Here
    first = side1 + side2 > side3
    second = side1 + side3 > side2
    third = side2 + side3 > side1
    return first and second and third

print(is_valid_triangle(7, 9, 13))
print(is_valid_triangle(5, 7, 10))
print(is_valid_triangle(4, 8, 15))
print(is_valid_triangle(2, 4, 15))